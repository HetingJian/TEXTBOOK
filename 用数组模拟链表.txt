(1) 单链表 ：邻接表 存储树和图  //这个最关键
(2) 双链表                      //用来优化某些题
  
用数组来模拟单链表
e[]表示某个点的值 ne[]表示next指针
3->5->7->9
e[0] =3;     e[1]=5;       e[2]=7;
  
ne[0]=1;     ne[1]=2;	   ne[2]=3;  //指向的是下标
//head表示头结点的下标
//e[i]表示某个点的值
//ne[i]表示下个节点的下标
//idx存的是当前已经用到了哪个点

//初始化
head=-1;
idx=0;

//将x插入头节点（也就是插入的x变成了头结点）
void add_to_head(){

  e[idx]=x;
  ne[idx]=head;
  head=idx;
  idx++;

}

//插到下标是k的点的后面
记得画一个图
void add(int k){


  e[idx]=x; 
  ne[idx]=ne[k];
  ne[k]=idx;
  idx++;

}

//将下标是k后面的节点删掉
void remove(int k){
  ne[k]=ne[ne[k]];
}

双链表
e[N],l[N],r[N]，idx
e是内容，l是左边点的下标 r是右边点的下标
0:head
1:tail
//0表示左端点，1表示右端点


void init()
{
  r[0]=1,l[1]=0;
  idx=2;
}
//在下标是k的点的右边插入一个x
void add(int k,int x)
{
  e[idx]=x;
  r[idx]=r[k];
  l[idx]=k;
  l[r[idx]]=idx;
  r[k]=idx; 
}
//在下标是k的点的左边插入一个x
add(l[k],x)


删除第k个点
void remove1(int k)
{
  r[l[k]]=r[k];
  l[r[k]]=l[k];
}

写成数组比较简单
















