01背包（每件物品只有1个）


完全背包（每件物品都有无限件可用）


这里的优化其实是对代码做等价变形。
优化成一维之后，j - v[i]比j小，从小到大循环会先计算f[j - v[i]]，
所以f[j] = max(f[j], f[j - v[i]] + w[i])等价于f[i, j] = max(f[i, j], f[i, j - v[i]] + w[i]。
从大到小循环会先计算f[j]，所以等价于f[i, j] = max(f[i, j], f[i - 1, j - v[i]] + w[i])。


多重背包（物品数量有限）k <= s[i] && k * v[i] <= j 比01背包朴素做法多一个特判
但这种朴素做法的耗时久



多重背包Ⅱ